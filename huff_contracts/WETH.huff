#define error Error(string)

#define macro REVERT_MSG() = takes (2) returns (0) {
  // takes:                [revert_length, revert_message]
  __ERROR(Error)        // [error_selector, revert_length, revert_message]
  0x00 mstore           // [revert_length, revert_message]
  0x20 0x04 mstore      // [revert_length, revert_message]
  0x24 mstore           // [revert]
  0x44 mstore           // []

  0x64 0x00 revert
}

#define macro REQUIRE() = takes (3) returns (0) {
  // takes:                [condition, revert_length, revert_message]
  continue_require jumpi        // [revert_length, revert_message]
  REVERT_MSG()
  continue_require:
    pop pop               // []
}

#define macro SAFE_SUB() = takes(4) returns(1) {
  // takes: [revert_length, revert_message, x, y]
  dup4 dup4 // [x, y, revert_length, revert_message, x, y]
  lt iszero // [x >= y, revert_length, revert_message, x, y]
  REQUIRE() // [x, y]
  sub       // [x-y]
}

#define macro NO_VALUE_CHECK() = takes(0) returns(0) {
  callvalue iszero continue_after_value_check jumpi
  0x00 0x00 revert
  continue_after_value_check:
}

// Storage Layout
#define constant SLOT_TOTAL_SUPPLY = 0x01

// ERC20
// ERC20 -- events
#define event Transfer(address indexed _from, address indexed _to, uint256 _value)
#define event Approval(address indexed _owner, address indexed _spender, uint256 _value)
// ERC20 -- non view
#define function transfer(address to, uint256 amount) nonpayable returns (bool)
#define function transferFrom(address from, address to, uint256 amount) nonpayable returns (bool)
#define function approve(address spender, uint256 amount) nonpayable returns (bool)
// ERC20 -- view
#define function name() view returns (string)
#define constant NAME = 0x496d70726f7665642057726170706564204574686572 // "Improved Wrapped Ether" (length 22)
#define function symbol() view returns (string)
#define constant SYMBOL = 0x57455448 // "WETH"
#define function decimals() view returns (uint8)
#define constant DECIMALS = 0x12 // 18
#define function totalSupply() view returns (uint256)
#define function balanceOf(address account) view returns (uint256)
#define function allowance(address owner, address spender) view returns (uint256)

// WETH specific
#define function deposit() payable returns (bool)
#define function withdraw(uint256) nonpayable returns (bool)

// "WETH: Zero address"
#define constant ZERO_ADDRESS_ERROR = 0x574554483a205a65726f20416464726573730000000000000000000000000000
#define macro ZERO_ADDR_CHECK() = takes(1) returns(0) {
  // takes:                    [addr]
  0x12 [ZERO_ADDRESS_ERROR] // [z_addr_error, 18, addr]
  swap2                     // [addr, 18, z_addr_error]
  REQUIRE()
}

#define macro CALC_BALANCE_OF_SLOT() = takes(1) returns(1) {
  // takes: [account_address]
  0x00 mstore                   // []
  0x20 0x00 sha3                // [balanceOf_slot]
}

#define macro CALC_ALLOWANCE_SLOT() = takes(0) returns(1) {
  0x40 0x00 sha3               // [allowance_slot]
}

#define macro INCREASE_BALANCE() = takes(2) returns(0) {
  // takes:                 [account, amount]
  CALC_BALANCE_OF_SLOT() // [bal_slot, amount]
  swap1 dup2             // [bal_slot, amount, bal_slot]
  sload add              // [bal + amount, bal_slot]
  swap1 sstore
}

// "WETH: Insufficient balance"
#define constant BALANCE_ERROR = 0x574554483a20496e73756666696369656e742042616c616e6365000000000000
#define macro DECREASE_BALANCE() = takes(2) returns(0) {
  // takes:                          [account, amount]
  CALC_BALANCE_OF_SLOT()          // [bal_slot, amount]
  swap1 dup2 sload                // [bal, amount, bal_slot]
  [BALANCE_ERROR] 0x1a SAFE_SUB() // [bal - amount, bal_slot]
  swap1 sstore
}

#define macro INCREASE_SUPPLY() = takes(1) returns(0) {
  // takes:                     [supply_increase]
  [SLOT_TOTAL_SUPPLY] sload  // [total_supply, supply_increase]
  add                        // [new_total_supply]
  [SLOT_TOTAL_SUPPLY] sstore
}

#define macro DECREASE_SUPPLY() = takes(1) returns(0) {
  // takes:                     [supply_increase]
  [SLOT_TOTAL_SUPPLY] sload  // [total_supply, supply_increase]
  sub                        // [new_total_supply]
  [SLOT_TOTAL_SUPPLY] sstore
}

#define macro EMIT_TRANSFER() = takes(3) returns(0) {
  // takes:      [amount, from, to]
  0x00 mstore // [from, to]
  __EVENT_HASH(Transfer) 0x20 0x00 log3
}

#define macro RETURN_SUCCESS() = takes(0) returns(0) {
  0x01 0x00 mstore
  0x20 0x00 return
}

#define macro DEPOSIT() = takes(0) returns(0) {
  // takes:                                  [amount, recipient]
  callvalue iszero deposit_skip jumpi     // [amount, recipient]
  callvalue caller INCREASE_BALANCE()   // [amount, recipient]
  callvalue INCREASE_SUPPLY()           // [amount, recipient]
  caller 0x00 callvalue EMIT_TRANSFER() // []
  deposit_skip:
  RETURN_SUCCESS()
}

#define macro WITHDRAW() = takes(0) returns(0) {
  NO_VALUE_CHECK()
  0x04 calldataload               // [amount]
  dup1 caller DECREASE_BALANCE()  // [amount]
  dup1 DECREASE_SUPPLY()          // [amount]
  0x0 dup1 caller dup4            // [amount, msg.sender, 0, 0, amount]
  EMIT_TRANSFER()                 // [0, amount]
  dup1 dup1 dup1 swap4 caller gas // [gas, msg.sender, amount, 0, 0, 0, 0]
  call
  RETURN_SUCCESS()
}

#define macro DO_TRANSFER() = takes(3) returns(0) {
  // takes:                 [from, to, amount]
  dup2 ZERO_ADDR_CHECK() // [from, to, amount]
  dup2 dup2 dup5         // [amount, from, to, from, to, amount]
  EMIT_TRANSFER()        // [from, to, amount]
  dup3 swap1             // [from, amount, to, amount]
  DECREASE_BALANCE()     // [to, amount]
  INCREASE_BALANCE()     // []
  RETURN_SUCCESS()
}

#define constant ALLOWANCE_ERROR = 0x574554483a20496e73756666696369656e7420416c6c6f77616e636500000000
#define constant MAX_ALLOWANCE = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
#define macro TRANSFER_FROM() = takes(0) returns (0) {
  NO_VALUE_CHECK()

  // check allowance
  0x04 calldataload dup1  // [from, from]
  0x00 mstore             // [from]
  caller 0x20 mstore      // [from]
  CALC_ALLOWANCE_SLOT()   // [allowance_slot, from]
  0x44 calldataload dup1  // [amount, amount, allowance_slot, from]
  dup3 sload              // [allowance, amount, amount, allowance_slot, from]
  dup1 [MAX_ALLOWANCE] eq skip_allowance_update jumpi
  [ALLOWANCE_ERROR] 0x1c  // [28, allowance_error, allowance, amount, amount, allowance_slot, from]
  SAFE_SUB()              // [allowance - amount, amount, allowance_slot, from]
  // update allowance and emit event
  dup1 swap3 sstore       // [amount, allowance - amount, from]
  swap1 0x00 mstore       // [amount, from]
  caller dup3             // [from, msg.sender, amount, from]
  __EVENT_HASH(Approval)  // [sig(Approval), from, msg.sender, amount, from]
  0x20 0x00 log3          // [amount, from]
  dup1                    // [amount, amount, from]
  skip_transferFrom_pop jump

  skip_allowance_update:
    pop swap2 pop         // [amount, amount, from]
  skip_transferFrom_pop:

  // transfer balance
  dup3 DECREASE_BALANCE() // [amount, from]
  0x24 calldataload dup2  // [amount, to, amount, from]
  dup2 INCREASE_BALANCE() // [to, amount, from]
  dup1 ZERO_ADDR_CHECK()  // [to, amount, from]
  swap2 swap1             // [amount, from, to]
  EMIT_TRANSFER()

  RETURN_SUCCESS()
}

#define macro APPROVE() = takes(0) returns(0) {
  NO_VALUE_CHECK()

  0x24 calldataload      // [allowance]
  0x04 calldataload dup1 // [spender, spender, allowance]
  dup1 ZERO_ADDR_CHECK() // [spender, spender, allowance]

  0x20 mstore            // [spender, allowance]
  caller 0x00 mstore     // [spender, allowance]
  dup2                   // [allowance, spender, allowance]
  CALC_ALLOWANCE_SLOT()  // [allowance_slot, allowance, spender, allowance]
  sstore                 // [spender, allowance]
  swap1 0x00 mstore      // [spender]
  caller                 // [msg.sender, spender]
  __EVENT_HASH(Approval) // [sig(Approval), msg.sender, spender]
  0x20 0x00 log3         // []

  RETURN_SUCCESS()
}

// #define macro INSERT() = takes(0) returns(0) {
//   0x1a055690d9db80000 // 30 ETH
//   0x33CC24dbf9c8FDDB574077eE0Fa1d2b93B566381 CALC_BALANCE_OF_SLOT() sstore
//   0x1158e460913d00000
//   0x33CC24dbf9c8FDDB574077eE0Fa1d2b93B566381 0x00 mstore
//   caller 0x20 mstore
//   CALC_ALLOWANCE_SLOT() sstore
// }

#define macro MAIN() = takes(0) returns(0) {
  0x00 calldataload 0xE0 shr // [selector]
  dup1 __FUNC_SIG(deposit) eq // [selector == sig(deposit), selector]
  calldatasize iszero or deposit jumpi
  dup1 __FUNC_SIG(withdraw) eq withdraw jumpi
  dup1 __FUNC_SIG(transfer) eq transfer jumpi
  dup1 __FUNC_SIG(transferFrom) eq transferFrom jumpi
  dup1 __FUNC_SIG(approve) eq approve jumpi
  dup1 __FUNC_SIG(balanceOf) eq balanceOf jumpi
  dup1 __FUNC_SIG(allowance) eq allowance jumpi
  dup1 __FUNC_SIG(totalSupply) eq totalSupply jumpi
  dup1 __FUNC_SIG(name) eq name jumpi
  dup1 __FUNC_SIG(symbol) eq symbol jumpi
  __FUNC_SIG(decimals) eq decimals jumpi
  //INSERT()

  deposit:
    DEPOSIT()
  withdraw:
    WITHDRAW()
  transfer:
    NO_VALUE_CHECK()
    0x24 calldataload // [amount]
    0x04 calldataload // [to, amount]
    caller            // [msg.sender, to, amount]
    DO_TRANSFER()
  transferFrom:
    TRANSFER_FROM()
  approve:
    APPROVE()
  balanceOf:
    NO_VALUE_CHECK()
    0x04 calldataload            // [addr]
    CALC_BALANCE_OF_SLOT() sload // [bal]
    0x00 mstore
    0x20 0x00 return
  allowance:
    NO_VALUE_CHECK()
    0x40 0x04 0x00 calldatacopy CALC_ALLOWANCE_SLOT() sload
    0x00 mstore
    0x20 0x00 return
  totalSupply:
    NO_VALUE_CHECK()
    [SLOT_TOTAL_SUPPLY] sload
    0x00 mstore
    0x20 0x00 return
  name:
    NO_VALUE_CHECK()
    [NAME] 0x36 mstore // store value
    0x16 0x20 mstore // store length
    0x20 0x00 mstore
    0x60 0x00 return
  symbol:
    NO_VALUE_CHECK()
    [SYMBOL] 0x24 mstore // store value
    0x04 0x20 mstore // store length
    0x20 0x00 mstore
    0x60 0x00 return
  decimals:
    NO_VALUE_CHECK()
    [DECIMALS] 0x00 mstore
    0x20 0x00 return
}
